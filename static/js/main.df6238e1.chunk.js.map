{"version":3,"sources":["components/QuoteMachine.js","App.js","reportWebVitals.js","index.js"],"names":["QuoteMachine","assignNewQuoteIndex","selectedQuote","Card","CardContent","Typography","id","quote","author","CardActions","Button","size","onClick","IconButton","target","href","encodeURI","icon","faTwitter","withStyles","container","display","height","alignItems","classes","useState","quotes","setQuotes","selectedQuoteIndex","setSelectedQuoteIndex","getSelectedQuote","length","Number","isInteger","useEffect","a","fetch","data","json","random","Grid","className","justify","xs","lg","item","generateNewQuoteIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAoCeA,EA1BM,SAAC,GAAD,IAAGC,EAAH,EAAGA,oBAAqBC,EAAxB,EAAwBA,cAAxB,OACjB,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAEI,eAACC,EAAA,EAAD,CAAYC,GAAG,OAAf,UACKJ,EAAcK,MADnB,MAC4B,sBAAMD,GAAG,SAAT,SAAmBJ,EAAcM,cAIjE,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQJ,GAAG,YAAYK,KAAK,QAAQC,QAASX,EAA7C,wBACA,cAACY,EAAA,EAAD,CACIP,GAAG,cACHQ,OAAO,SACPC,KAAMC,UAAU,yCAAD,OAA0Cd,EAAcK,QAH3E,SAMI,cAAC,IAAD,CAAiBU,KAAMC,IAAWP,KAAK,gB,uBCwDxCQ,kBA3EA,CACfC,UAAW,CACPC,QAAQ,OACRC,OAAQ,QACRC,WAAY,WAuEDJ,EAlEf,YAAyB,IAAXK,EAAU,EAAVA,QAAU,EAYMC,mBAAS,IAZf,mBAYfC,EAZe,KAYPC,EAZO,OAa8BF,mBAAS,MAbvC,mBAafG,EAbe,KAaKC,EAbL,KA4BtB,SAASC,IACP,GAAKJ,EAAOK,QAAWC,OAAOC,UAAUL,GAGxC,OAAOF,EAAOE,GAsBhB,OAvCAM,oBAAS,sBAAC,8BAAAC,EAAA,sEACWC,MAAM,yIADjB,cACFC,EADE,gBAEaA,EAAKC,OAFlB,OAEFZ,EAFE,OAGRC,EAAUD,GACVG,EAAsBU,iBAAO,EAAGb,EAAOK,OAAS,IAJxC,2CAKP,IAmCD,cAACS,EAAA,EAAD,CAAMC,UAAWjB,EAAQJ,UAAWd,GAAG,YAAYoC,QAAQ,SAAStB,WAAS,EAA7E,SACE,cAACoB,EAAA,EAAD,CAAMG,GAAI,GAAIC,GAAI,EAAGC,MAAI,EAAzB,SAEIf,IAAqB,cAAC,EAAD,CAAc5B,cAAe4B,IAAoB7B,oBAX9E,WACE4B,EARF,WACE,GAAKH,EAAOK,OAGZ,OAAOQ,iBAAO,EAAGb,EAAOK,OAAS,GAIXe,OAUoG,YC/D/GC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.df6238e1.chunk.js","sourcesContent":["import React from 'react';\nimport  Typography  from '@material-ui/core/Typography';\nimport  Card  from '@material-ui/core/Card';\nimport  CardContent  from '@material-ui/core/CardContent';\nimport  CardActions  from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faTwitter} from '@fortawesome/free-brands-svg-icons';\n\nconst QuoteMachine = ({ assignNewQuoteIndex, selectedQuote }) => (\n    <Card>\n        <CardContent>\n        \n            <Typography id=\"text\">\n                {selectedQuote.quote} - <span id=\"author\">{selectedQuote.author}</span>\n            </Typography>\n        \n        </CardContent>\n        <CardActions>\n            <Button id=\"new-quote\" size=\"small\" onClick={assignNewQuoteIndex} >Next Quote</Button>\n            <IconButton\n                id=\"tweet-quote\"\n                target=\"_blank\"\n                href={encodeURI(`https://twitter.com/intent/tweet?text=${selectedQuote.quote}`)}\n            \n            >\n                <FontAwesomeIcon icon={faTwitter} size=\"md\"></FontAwesomeIcon>\n            </IconButton>\n\n        </CardActions>\n        \n    </Card>\n   \n);\n\nexport default QuoteMachine;","import React, {  useState, useEffect } from 'react';\nimport {random} from 'lodash';\nimport QuoteMachine from './components/QuoteMachine';\nimport 'typeface-roboto';\nimport {Grid, withStyles} from '@material-ui/core';\n\n\n\nconst styles = {\ncontainer: {\n    display:'flex',\n    height: '100vh',\n    alignItems: 'center'\n\n  }\n};\n\nfunction App({classes}) {\n  \n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     quotes: [],\n  //     selectedQuoteIndex: null,\n  //   }\n  //   this.selectQuoteIndex = this.generateNewQuoteIndex.bind(this);\n  //   this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this)\n  // }\n\n  const [quotes, setQuotes] = useState([]);\n  const [selectedQuoteIndex, setSelectedQuoteIndex] = useState(null);\n\n  useEffect(async () => {\n    const data = await fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json');\n    const quotes = await data.json();\n    setQuotes(quotes);\n    setSelectedQuoteIndex(random(0, quotes.length - 1))\n  }, []);\n\n  // componentDidMount() {\n  //   fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n  //     .then(data => data.json())\n  //     .then(quotes => this.setState({quotes}, this.assignNewQuoteIndex));\n  // }\n\n  function getSelectedQuote() {\n    if (!quotes.length || !Number.isInteger(selectedQuoteIndex)) {\n      return undefined;\n    }\n    return quotes[selectedQuoteIndex];\n  }\n  \n\n  /**\n   * Returns an integer representing an index in states.quotes\n   * if state.qoutes is empty, returns undefined\n   */\n  function generateNewQuoteIndex() {\n    if (!quotes.length) {\n      return undefined;\n    }\n    return random(0, quotes.length - 1);\n  }\n\n  function assignNewQuoteIndex() {\n    setSelectedQuoteIndex(generateNewQuoteIndex());\n  }\n\n\n  \n    \n  return (\n    <Grid className={classes.container} id=\"quote-box\" justify=\"center\" container>\n      <Grid xs={11} lg={8} item>\n        {\n          getSelectedQuote() ? <QuoteMachine selectedQuote={getSelectedQuote()} assignNewQuoteIndex={assignNewQuoteIndex} /> :null\n        }\n\n      </Grid>\n    </Grid>\n  );\n  \n}\nexport default withStyles(styles)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}